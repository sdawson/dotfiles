set nocompatible

silent! if plug#begin('~/.vim/plugged')

Plug 'ctrlpvim/ctrlp.vim'
Plug 'elzr/vim-json'
Plug 'plasticboy/vim-markdown'
Plug 'pangloss/vim-javascript'
Plug 'MaxMEllon/vim-jsx-pretty'
Plug 'leafgarland/typescript-vim'
Plug 'hail2u/vim-css3-syntax'
Plug 'othree/html5.vim'
if v:version >= 800
  Plug 'fatih/vim-go'
endif
Plug 'twinside/vim-syntax-haskell-cabal'
Plug 'bkad/CamelCaseMotion'
Plug 'ConradIrwin/vim-bracketed-paste'
Plug 'tpope/vim-abolish'
Plug 'bronson/vim-visual-star-search'
Plug 'mbbill/undotree', { 'on': 'UndotreeToggle' }
Plug 'wincent/scalpel'
Plug 'pbrisbin/vim-mkdir'
" Plug 'vim-scripts/Vim-R-plugin'
Plug 'skammer/vim-css-color'
Plug 'tpope/vim-speeddating'
Plug 'kana/vim-textobj-user'
Plug 'nelstrom/vim-textobj-rubyblock'
Plug 'glts/vim-textobj-comment'
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'junegunn/vim-easy-align'
Plug 'junegunn/vim-after-object'
Plug 'rust-lang/rust.vim'
Plug 'cespare/vim-toml'
Plug 'jparise/vim-graphql'
Plug 'ntpeters/vim-better-whitespace'
Plug 'christoomey/vim-system-copy'
Plug 'LnL7/vim-nix'
Plug 'vim-scripts/copypath.vim'
Plug 'chrisbra/csv.vim'
Plug 'prabirshrestha/vim-lsp'
if !has('nvim')
  Plug 'rhysd/vim-healthcheck'
endif

call plug#end()
endif

" Set leader from \ to <SPACE>
let mapleader="\<Space>"
let maplocalleader="\\"

runtime macros/matchit.vim

let g:camelcasemotion_key='<leader>'

colorscheme noether
set t_Co=256


" CtrlP Settings

" Search from current directory instead of project root
let g:ctrlp_working_path_mode=0
" Force files searched for to be open in a new buffer,
" even if they're already open in another split
let g:ctrlp_switch_buffer=0
let g:ctrlp_cmd="CtrlPMRU"
let g:ctrlp_max_files=30000
let g:ctrlp_extensions = ['autoignore']
if executable('rg') " Use ripgrep for listing files is available
  let g:ctrlp_user_command='rg %s --files --color=never --glob "" | awk ''{ print length, $0 }'' | sort -n -s | cut -d" " -f2-'
  let g:ctrlp_use_caching=0
elseif executable('ag') " Use silver searcher for listing files if available
  let g:ctrlp_user_command='ag %s -l --nocolor -g "" | awk ''{ print length, $0 }'' | sort -n -s | cut -d" " -f2-'
  let g:ctrlp_use_caching=0
endif

augroup highlightlonglines
  autocmd!
  autocmd BufNewFile,BufRead * call sophied#functions#HighlightTooLongLines()
augroup END

augroup splitresizing
  autocmd!
  autocmd VimResized * wincmd =
augroup END

" Remove _ to <- replacement in vim-r-plugin
" let vimrplugin_underscore=0

" vim-go settings
let g:go_template_autocreate=0
let g:go_imports_autosave=0

" make :W == :w
command! W w

" undotree settings
let g:undotree_WindowLayout=2

" vim-markdown settings
let g:vim_markdown_folding_disabled=1

" vim-javascript settings
let g:javascript_plugin_flow=1

" vim-better-whitespace settings
let g:strip_whitespace_confirm=0

" vim-lsp settings
if executable('rust-analyzer')
  au User lsp_setup call lsp#register_server({
    \ 'name': 'rust-analyzer',
    \ 'cmd': {server_info->['rust-analyzer']},
    \ 'allowlist': ['rust'],
    \ })
endif

function! s:on_lsp_buffer_enabled() abort
  setlocal omnifunc=lsp#complete
  setlocal signcolumn=yes # what does this mean?
  if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
  nmap <buffer> gd <plug>(lsp-definition)
  nmap <buffer> gr <plug>(lsp-references)

  let g:lsp_format_sync_timeout=1000
endfunction

augroup lsp_install
  au!
  autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

if has("patch-9.0.0167")
  let g:lsp_inlay_hints_enabled=1
  hi link lspInlayHintsType Comment
  hi link lspInlayParameter Comment
endif

let g:lsp_fold_enabled=0

let g:lsp_use_lua = has('lua') && has('patch-8.2.0775')
let g:lsp_use_native_client = has('patch-8.2.4780')
