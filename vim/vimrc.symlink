set nocompatible
filetype off

set rtp+=~/.vim/bundle/vundle/
call vundle#rc()

" Let Vundle manage Vundle
Plugin 'gmarik/vundle'

Plugin 'ctrlpvim/ctrlp.vim'

" Syntax related bundles
Plugin 'leshill/vim-json'
Plugin 'kchmck/vim-coffee-script'
Plugin 'sdawson/vim-markdown'
Plugin 'vim-scripts/django.vim'
Plugin 'pangloss/vim-javascript'
Plugin 'mxw/vim-jsx'
Plugin 'hail2u/vim-css3-syntax'
Plugin 'othree/html5.vim'
Plugin 'fatih/vim-go'
Plugin 'twinside/vim-syntax-haskell-cabal'
Plugin 'bkad/CamelCaseMotion'
Plugin 'ConradIrwin/vim-bracketed-paste'
Plugin 'tpope/vim-abolish'
Plugin 'bronson/vim-visual-star-search'
Plugin 'leafgarland/typescript-vim'
" Plugin 'vim-scripts/Vim-R-plugin'

" Random
Plugin 'skammer/vim-css-color'
Plugin 'tpope/vim-speeddating'

" Load filetype specific indent files from .vim/indent
filetype plugin indent on

" Set leader from \ to <SPACE>
let mapleader = " "

set laststatus=2
set cmdheight=2
set ruler
set title

set showmode
set showcmd
set report=0
set visualbell

set incsearch
set hlsearch
set showmatch
set ignorecase " searches are case insensitive
set smartcase  " unless they contain at least one capital letter
nnoremap <leader><leader> :noh<CR>
set gdefault

set nowrap
set listchars+=extends:@

set autoindent
set tabstop=2
set expandtab
set copyindent

set shiftwidth=2
set shiftround

set textwidth=79
set wrapmargin=0
set formatoptions=tcroqwn
set backspace=indent,eol,start

" When joining lines that end with '.', '?' or '!', only insert one space,
" not two
set nojoinspaces

nnoremap <leader>v V`]

syntax on
colorscheme noether
set t_Co=256

highlight ExtraWhitespace ctermbg=red guibg=#aa4450
match ExtraWhitespace /\s\+$/

" filetype on
" autocmd FileType make :set noexpandtab
" autocmd FileType c :set cindent
" autocmd FileType txt :set wrap
" autocmd FileType python :set textwidth=0
" autocmd FileType go :set textwidth=0
" autocmd FileType mkd :set textwidth=0
" filetype plugin indent on
" filetype plugin on

set history=50
set backup
set backupdir=~/.vim/backup

set wildchar=<TAB>
set wildmenu
set wildmode=longest,full

" set hybrid line number mode
set nu
set relativenumber
set cursorline
set cursorlineopt=number

" Faster split movements
nmap <silent> <c-k> :wincmd k<CR>
nmap <silent> <c-j> :wincmd j<CR>
nmap <silent> <c-h> :wincmd h<CR>
nmap <silent> <c-l> :wincmd l<CR>

" Adjust splits to be the same size
map <leader>= <c-w>=
" Max out the height of a split (e.g. wmii)
map <leader>- <c-w>_

" Invoke CtrlP
nmap <leader>f :CtrlP<CR>
" Search from current directory instead of project root
let g:ctrlp_working_path_mode = 0
" Force files searched for to be open in a new buffer,
" even if they're already open in another split
let g:ctrlp_switch_buffer = 0
let g:ctrlp_max_files = 20000
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|reports\|flow-typed'
if executable('ag') " Use silver searcher for listing files if available
  let g:ctrlp_user_command = 'ag %s -l --hidden --nocolor -g ""'
endif

map ; :
noremap ;; ;
nnoremap ' `
nnoremap ` '

" Toggle between hybrid and absolute line number modes
" (assumes set number has previously been set)
function! NumberToggle()
  if(&relativenumber == 1)
    set norelativenumber
  else
    set relativenumber
  endif
endfunc

nnoremap <leader>y :call NumberToggle()<CR>

" Highlight cols 81 and 82
function! HighlightTooLongLines()
  highlight def link RightMargin Error
  if &textwidth != 0
    exec 'match RightMargin /\%<' . (&textwidth + 3) . 'v.\%>' . (&textwidth + 1) . 'v/'
  endif
endfunction

augroup filetypedetect
au BufNewFile,BufRead * call HighlightTooLongLines()
augroup END

" Remove _ to <- replacement in vim-r-plugin
" let vimrplugin_underscore = 0

" Line navigation stays the same when wrapping is on
nmap j gj
nmap k gk

" Visual shifting (does not exit visual mode)
vnoremap < <gv
vnoremap > >gv

" Allow using the repeat operator with a visual selection
vnoremap . :normal .<CR>

" Easier horizontal scrolling
map zl zL
map zh zH

function WrapToggle()
  if &wrap
    echo "Wrap OFF"
    setlocal nowrap
    set virtualedit=all
  else
    echo "Wrap ON"
    setlocal wrap linebreak nolist
    set virtualedit=
    setlocal textwidth=0
    setlocal wrapmargin=0
  endif
endfunction

noremap <leader>l :call WrapToggle()<CR>

" CamelCaseMotion settings
call camelcasemotion#CreateMotionMappings('<leader>')

function! Today()
  let today = strftime("%A %d\/%m\/%Y")
  exe "normal a". today
endfunction
command! Today :call Today()

nnoremap <leader>d :Today<CR>

nnoremap <leader>r :windo e<CR>

" vim-go settings
let g:go_template_autocreate = 0

" Spellcheck settings
set spl=en_au

" Save session (will open all current windows when vim
" is started with vim -S)
nnoremap <leader>s :mksession<CR>

" make :W == :w
command! W w

" Persistent Undo
set undodir=~/.vim/undodir
set undofile
set undolevels=1000 " max number of changes that can be undone
set undoreload=10000 " max number of lines to save in undofile when a buffer reloads
