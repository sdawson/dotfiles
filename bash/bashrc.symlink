#
# ~/.bashrc
#

: ${UNAME=$(uname)}

# Shortcut to the dotfiles dir
export DOT=$HOME/.dotfiles

# If not running interactively, don't do anything
#[[ $- != *i* ]] && return

# Editor env variables
export EDITOR=vim
export VISUAL=vim
export GIT_EDITOR=vim

export COLUMNS

export TRANSMISSION_HOME=${HOME}/.transmission

# usage:
# if command_exists mvim; then
#   export BLAH="mvim --no-fork"
# fi
command_exists() {
  command -v "$1" > /dev/null 2>&1;
}

# turn off history expansion
set +H

export HOSTNAME="$(hostname)"
export HOSTNAME_SHORT="${HOSTNAME%%.*}"

# bash history settings
export HISTCONTROL=ignoredups:ignorespace:erasedups # no duped entries
export HISTFILESIZE=100000
export HISTSIZE=${HISTFILESIZE}
export HISTIGNORE=clear:pwd:exit:bg:fg
export HISTFILE="${HOME}/.history/$(date -u +%Y/%m/%d.%H.%M.%S)_${HOSTNAME_SHORT}_$$"
mkdir -p "$(dirname "$HISTFILE")"
export HISTTIMEFORMAT="%F %T: "
shopt -s histappend # append to history, don't overwrite it
shopt -s cmdhist # try to save all lines of a multiple-line command in the same history entry
shopt -s lithist # save multi-line commands to the history with embedded newlines
# bind '"\C-t": history-search-forward'

# fzf settings
export FZF_DEFAULT_OPTS='--no-height'
export FZF_ALT_C_OPTS='--keep-right'
export FZF_CTRL_R_OPTS="${FZF_CTRL_R_OPTS:+$FZF_CTRL_R_OPTS} --preview 'echo {}' --preview-window down:5:hidden:wrap --bind '?:toggle-preview'"

fzf-blah() {
  fzf -m --bind '?:toggle-preview,ctrl-a:select-all,ctrl-d:deselect-all,ctrl-t:toggle-all' "$@"
}

fzrg() {
  rg "$@" --color=always | fzf-blah --ansi | cut -d':' -f1 | uniq | xargs rg -p "$@"
}

if command_exists fd; then
  export FZF_DEFAULT_COMMAND="fd --hidden --follow --exclude .git . $1"
  export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
  export FZF_ALT_C_COMMAND="fd -t d . $1"

  # Use fd to generate the list for file completion (e.g. vim **<TAB>)
  _fzf_compgen_path() {
    fd --hidden --follow --exclude ".git" . "$1"
  }

  # Use fd to generate the list for directory completion
  _fzf_compgen_dir() {
    fd --type d --hidden --follow --exclude ".git" . "$1"
  }
fi

if command_exists fzf-share; then
  source "$(fzf-share)/key-bindings.bash"
  source "$(fzf-share)/completion.bash"
fi

# ripgrep settings
export RIPGREP_CONFIG_PATH="${HOME}/.ripgreprc"

# Golang env vars
export GOBIN="${HOME}/bin/go"

if command_exists bat; then
  export BAT_CONFIG_PATH="${HOME}/.bat.config"
fi

unamestr=`uname`

if [ "$unamestr" = "Linux" ]; then
  export TERMINAL=xterm
  alias unison='unison-gtk2'

  SETGITPROMPT=false
  if [ -f /usr/share/git/completion/git-prompt.sh ]; then
    source /usr/share/git/completion/git-prompt.sh
    SETGITPROMPT=true
  elif [ -f /run/current-system/sw/share/bash-completion/completions/git-prompt.sh ]; then
    source "/run/current-system/sw/share/bash-completion/completions/git-prompt.sh"
    SETGITPROMPT=true
  fi

  if [ "$SETGITPROMPT" = true ]; then
    GIT_PS1_SHOWDIRTYSTATE=true
    PS1='[\u@\h \W$(__git_ps1 " (%s)")]\$ '
  fi

  alias ls='ls --color=auto'
  alias sl='ls --color=auto'
  alias ll='ls --color=auto -l'
  alias la='ls --color=auto -al'
  alias lh='la --color=auth -cth'

  #@$(ruby -rubygems -e "puts Gem.user_dir")/bin

  # Adding arduino to PATH
  export PATH=${PATH}:/usr/share/arduino-1.0

  # Lang (locale info) for anki software
  export LANG=en_AU.UTF-8
elif [ "$unamestr" = "Darwin" ]; then
  # Brew path additions
  export PATH=/usr/local/bin:/usr/local/sbin:$PATH

  # ROOT path additions
  export PATH=${PATH}:${HOME}/dev/root/bin
  export LD_LIBRARY_PATH=${LD_LIBRARY_PATH}:${HOME}/dev/root/lib

  # Silence bash->zsh deprecation warning
  export BASH_SILENCE_DEPRECATION_WARNING=1

  # Exports for node
  export NODE_PATH="/usr/local/lib/node"

  # path fixes for homebrew git
  export PATH=/usr/local/opt/gettext/bin:${PATH}

  if command_exists rbenv; then
    eval "$(rbenv init -)"
  fi

  if hash foo 2>/dev/null; then
    if [ -f $(brew --prefix)/etc/bash_completion ]; then
      . $(brew --prefix)/etc/bash_completion
    fi
  fi

  if [ -f ~/.git-prompt.sh ]; then
    source ~/.git-prompt.sh
  fi

  # support using lesspipe to enable listing the files in a zip
  # via `less name_of_file.zip`
  export LESSOPEN="|/opt/homebrew/bin/lesspipe.sh %s"

  GIT_PS1_SHOWDIRTYSTATE=true
  export PS1='[\u@\h \W$(__git_ps1)]\$ '

  alias ls='ls -G'
  alias sl='ls -G'
  alias ll='ls -Gl'
  alias la='ls -Gal'
  alias lh='la -cth'
fi

alias givm='gvim'
alias histgrep="${HOME}/.dotfiles/bash/histgrep.bash"
alias fzfhist="${HOME}/.dotfiles/bash/fzfhist.bash"
alias dockerclean="${HOME}/.dotfiles/bash/docker_clean.bash"
alias timehelp="${HOME}/.dotfiles/bash/timestamp_help.bash"
alias gls="${HOME}/bin/gitlogsince.sh"
if command_exists R; then
  alias r="$(which R) --no-save"
fi
alias mv='mv -i'
alias rm='rm -i'
alias gdw="git diff --color-words"
alias b="cd $OLDPWD"

# git shortcuts
alias gitroot='cd $(git rev-parse --show-toplevel) && echo "$_"'
# alias gl="git log --graph --oneline --decorate --date=short --all --pretty=format:'%ad %h %Cgreen%an %C(auto)%d %Creset%s'"

# Load all completion files
for config_file in `ls $DOT/**/completion/*`
do
  source "$config_file"
done

dc() { cd ${1:-..}; }
complete -o nospace -F _dcBackwardsPathCompletion dc

export NVM_DIR="${HOME}/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm
[ -s "$NVM_DIR/bash_completion" ] && \. "$NVM_DIR/bash_completion"  # This loads nvm bash_completion

[ -f ~/.fzf.bash ] && source ~/.fzf.bash

if [ -f $HOME/.cargo/env ]
then
  source "$HOME/.cargo/env"
fi

# Load secret non-versioned stuff
if [ -f ~/.localrc ]
then
  source ~/.localrc
fi
