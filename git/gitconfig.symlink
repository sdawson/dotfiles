[user]
	name = Sophie Dawson
	email = sophiecdawson@gmail.com
[init]
  defaultBranch = main
[mergetool "diffmerge"]
	cmd = diffmerge --merge --result=$MERGED $LOCAL $BASE $REMOTE
	trustExitCode = false
[color]
	diff = auto
	status = auto
	branch = auto
[core]
  whitespace = trailing-space,space-before-tab
  excludesfile = ~/.gitignore
[diff]
  renames = copies
  mnemonicprefix = true
[diff "rspec"]
  xfuncname = "^[ \t]*((RSpec|describe|context|it|before|after|around|feature|scenario|background)[ \t].*)$"
[diff "swift"]
  xfuncname = ^[ \t]*((class|func)[ \t].*)$
[diff "rstats"]
  xfuncname = "^([a-zA-z.]+ <- function.*)$"
[diff "texinfo"]
  xfuncname = "^@node[ \t][ \t]*\\([^,][^,]*\\)"
[diff "rust"]
  xfuncname = "^[ \t]*(pub|)[ \t]*((fn|struct|enum|impl|trait|mod)[^;]*)$"
[diff "ecmascript"]
  xfuncname = "^((.*function.*)|([ \t]+it\\(.*))$"
[merge]
  conflictstyle = diff3
[branch]
  autosetupmerge = true
[push]
  default = tracking
[rebase]
  updateRefs = true
[rerere]
  enabled = 1
[pager]
  diff = delta
  log = delta
  reflog = delta
  show = delta
[delta]
  line-numbers = true
  syntax-theme = zenburn
[interactive]
  diffFilter = delta --color-only
[alias]
  la = "!git config -l | grep alias | cut -c 7-" # list all git aliases
  ls = log --pretty=oneline
  ll = log --graph --oneline --decorate --date=short --all --pretty=format:'%ad %h %Cgreen%an %C(auto)%d %Creset%s'
  fl = log -u # show the history of a particular file
  upstream = log --oneline --no-merges HEAD..origin/main # see what's happened at origin/master since you last pulled onto the current branch
  graph = log --graph --all --decorate --stat --date=iso # more complex git log
  resettoremote = "!f() { git reset --hard $1 }; f"
  rtr = "!f() { git reset --hard $1; }; f"
  cp = cherry-pick
  st = status
  shs = status -sb
  cl = clone
  co = checkout
  c = commit
  ca = commit --amend
  br = branch
  bd = branch -d
  bdd = branch -D
  bn = branch -m # new branch name here
  rb = rebase -i
  rbc = rebase --continue
  sp = push --force-with-lease # safe push (checks the local copy of what you're pushing is up to date with upstream before force pushing)
  spo = "!git push --force-with-lease -u origin $(git symbolic-ref --short HEAD)"
  po = "!git push -u origin $(git symbolic-ref --short HEAD)"
  it = '!git init && git commit -m "root" --allow-empty'
  wd = diff --word-diff # diff on words for viewing prose diffs
  ap = add --patch
  an = add --intent-to-add # makes new files unstaged, so they can be incrementally staged
  unst = restore --staged
  uncommit = reset --soft HEAD^
  purge-merged = !git branch --merged | tr -d '* ' | grep -v develop | grep -v master | xargs git branch -d
  recent = !git reflog | grep checkout | head -100 | awk '{print $8}' | cat -n | sort -k2 | uniq -f1 | sort -k1 | cut -f2- | head -10
  ffa = "!git ls-files -m -o --exclude-standard | fzf --print0 -m | xargs -0 -t -o git add"
  fixup = '!f() { TARGET=$(git rev-parse "$1"); git commit --fixup=$TARGET ${@:2} && EDITOR=true git rebase -i --autostash --autosquash $TARGET^; }; f'
[include]
  path = ~/.gitconfig-local
